// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.39  $
// File generated on 07.08.2007 11:28:06 from Type Library described below.

// ************************************************************************ //
// Type Lib: dsp850.dll (1)
// IID\LCID: {3EC18DA5-A4F2-11D4-8B68-008048B6BB00}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\STDOLE2.TLB)
//   (2) v4.0 StdVCL, (C:\WINDOWS\system32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __DSP850_TLB_h__
#define   __DSP850_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Dsp850_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DSP850;
extern __declspec (package) const GUID DIID_IDSP850I;
extern __declspec (package) const GUID CLSID_DSP850_;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{3EC18DB2-A4F2-11D4-8B68-008048B6BB00}") IDSP850I;
typedef TComInterface<IDSP850I, &DIID_IDSP850I> IDSP850IPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDSP850I DSP850_;
typedef IDSP850IPtr DSP850_Ptr;

#define LIBID_OF_DSP850_ (&LIBID_DSP850)
// *********************************************************************//
// Interface: IDSP850I
// Flags:     (4096) Dispatchable
// GUID:      {3EC18DB2-A4F2-11D4-8B68-008048B6BB00}
// *********************************************************************//
interface IDSP850I : public TDispWrapper<IDispatch>
{
  void __fastcall set_wPort(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* wPort */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_wPort()
  {
    _TDispID _dispid(/* wPort */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_dwSpeed(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* dwSpeed */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_dwSpeed()
  {
    _TDispID _dispid(/* dwSpeed */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_wError(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* wError */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_wError()
  {
    _TDispID _dispid(/* wError */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall Disconnect()
  {
    _TDispID _dispid(/* Disconnect */ DISPID(4));
    OleProcedure(_dispid);
  }

  void __fastcall SelectLanguage(short wLanguage)
  {
    _TDispID _dispid(/* SelectLanguage */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = wLanguage /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall SaveView(short wLayer)
  {
    _TDispID _dispid(/* SaveView */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = wLayer /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall GotoXY(short wX, short wY)
  {
    _TDispID _dispid(/* GotoXY */ DISPID(7));
    TAutoArgs<2> _args;
    _args[1] = wX /*[VT_I2:0]*/;
    _args[2] = wY /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ClrScr()
  {
    _TDispID _dispid(/* ClrScr */ DISPID(8));
    OleProcedure(_dispid);
  }

  void __fastcall RunDemo(short wLayer, short wMode)
  {
    _TDispID _dispid(/* RunDemo */ DISPID(9));
    TAutoArgs<2> _args;
    _args[1] = wLayer /*[VT_I2:0]*/;
    _args[2] = wMode /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PutStr(BSTR sStr)
  {
    _TDispID _dispid(/* PutStr */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = sStr /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Connect()
  {
    _TDispID _dispid(/* Connect */ DISPID(11));
    OleProcedure(_dispid);
  }


  __property   short           wPort = {read = get_wPort, write = set_wPort};
  __property   long            dwSpeed = {read = get_dwSpeed, write = set_dwSpeed};
  __property   short           wError = {read = get_wError, write = set_wError};
};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  IDSP850I
// Flags:     (4096) Dispatchable
// GUID:      {3EC18DB2-A4F2-11D4-8B68-008048B6BB00}
// *********************************************************************//
template<class T>
class IDSP850IDispT : public TAutoDriver<IDSP850I>
{
public:
  IDSP850IDispT(){}

  IDSP850IDispT(IDSP850I *pintf)
  {
    TAutoDriver<IDSP850I>::Bind(pintf, false);
  }

  IDSP850IDispT(IDSP850IPtr pintf)
  {
    TAutoDriver<IDSP850I>::Bind(pintf, true);
  }

  IDSP850IDispT& operator=(IDSP850I *pintf)
  {
    TAutoDriver<IDSP850I>::Bind(pintf, false);
    return *this;
  }

  IDSP850IDispT& operator=(IDSP850IPtr pintf)
  {
    TAutoDriver<IDSP850I>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DSP850_));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DSP850_);
  }

  void            __fastcall set_wPort(short Value);
  short           __fastcall get_wPort();
  void            __fastcall set_dwSpeed(long Value);
  long            __fastcall get_dwSpeed();
  void            __fastcall set_wError(short Value);
  short           __fastcall get_wError();
  void            __fastcall Disconnect();
  void            __fastcall SelectLanguage(short wLanguage);
  void            __fastcall SaveView(short wLayer);
  void            __fastcall GotoXY(short wX, short wY);
  void            __fastcall ClrScr();
  void            __fastcall RunDemo(short wLayer, short wMode);
  void            __fastcall PutStr(BSTR sStr);
  void            __fastcall Connect();

  __property   short           wPort = {read = get_wPort, write = set_wPort};
  __property   long            dwSpeed = {read = get_dwSpeed, write = set_dwSpeed};
  __property   short           wError = {read = get_wError, write = set_wError};
};
typedef IDSP850IDispT<IDSP850I> IDSP850IDisp;

// *********************************************************************//
// DispIntf:  IDSP850I
// Flags:     (4096) Dispatchable
// GUID:      {3EC18DB2-A4F2-11D4-8B68-008048B6BB00}
// *********************************************************************//
template <class T> void __fastcall
IDSP850IDispT<T>::set_wPort(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("wPort"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
IDSP850IDispT<T>::get_wPort()
{
  _TDispID _dispid(*this, OLETEXT("wPort"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IDSP850IDispT<T>::set_dwSpeed(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("dwSpeed"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IDSP850IDispT<T>::get_dwSpeed()
{
  _TDispID _dispid(*this, OLETEXT("dwSpeed"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IDSP850IDispT<T>::set_wError(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("wError"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
IDSP850IDispT<T>::get_wError()
{
  _TDispID _dispid(*this, OLETEXT("wError"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
IDSP850IDispT<T>::Disconnect()
{
  _TDispID _dispid(*this, OLETEXT("Disconnect"), DISPID(4));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IDSP850IDispT<T>::SelectLanguage(short wLanguage)
{
  _TDispID _dispid(*this, OLETEXT("SelectLanguage"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = wLanguage /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDSP850IDispT<T>::SaveView(short wLayer)
{
  _TDispID _dispid(*this, OLETEXT("SaveView"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = wLayer /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDSP850IDispT<T>::GotoXY(short wX, short wY)
{
  _TDispID _dispid(*this, OLETEXT("GotoXY"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = wX /*[VT_I2:0]*/;
  _args[2] = wY /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDSP850IDispT<T>::ClrScr()
{
  _TDispID _dispid(*this, OLETEXT("ClrScr"), DISPID(8));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IDSP850IDispT<T>::RunDemo(short wLayer, short wMode)
{
  _TDispID _dispid(*this, OLETEXT("RunDemo"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = wLayer /*[VT_I2:0]*/;
  _args[2] = wMode /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDSP850IDispT<T>::PutStr(BSTR sStr)
{
  _TDispID _dispid(*this, OLETEXT("PutStr"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = sStr /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IDSP850IDispT<T>::Connect()
{
  _TDispID _dispid(*this, OLETEXT("Connect"), DISPID(11));
  OleProcedure(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DSP850_
// Interface: IDSP850IDisp
// *********************************************************************//
typedef TCoClassCreatorT<IDSP850IDisp, IDSP850I, &CLSID_DSP850_, &DIID_IDSP850I> CoDSP850_;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dsp850_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dsp850_tlb;
#endif

#pragma option pop

#endif // __DSP850_TLB_h__
